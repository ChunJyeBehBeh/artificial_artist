[1mdiff --git a/JX_Multi_Motor_Original.py b/JX_Multi_Motor_Original.py[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex a0e560e..d071f69[m
[1m--- a/JX_Multi_Motor_Original.py[m
[1m+++ b/JX_Multi_Motor_Original.py[m
[36m@@ -28,16 +28,23 @@[m
 # Be sure that DXL MX properties are already set as %% ID : 1 / Baudnum : 34 (Baudrate : 57600)[m
 #[m
 [m
[32m+[m[32mfrom dynamixel_sdk import *  # Uses Dynamixel SDK library[m
 import os[m
[32m+[m[32mimport ctypes[m
 [m
 if os.name == 'nt':[m
     import msvcrt[m
[32m+[m
     def getch():[m
         return msvcrt.getch().decode()[m
 else:[m
[31m-    import sys, tty, termios[m
[32m+[m[32m    import sys[m
[32m+[m[32m    import tty[m
[32m+[m[32m    import termios[m
[32m+[m
     fd = sys.stdin.fileno()[m
     old_settings = termios.tcgetattr(fd)[m
[32m+[m
     def getch():[m
         try:[m
             tty.setraw(sys.stdin.fileno())[m
[36m@@ -46,29 +53,53 @@[m [melse:[m
             termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)[m
         return ch[m
 [m
[31m-from dynamixel_sdk import *                    # Uses Dynamixel SDK library[m
[32m+[m[32m# Function to read present position[m
[32m+[m[32mdef read_pos(id):[m
[32m+[m[32m    dxl_present_position, dxl_comm_result, dxl_error = packetHandler.read4ByteTxRx(portHandler, id, ADDR_MX_PRESENT_POSITION)[m
[32m+[m[32m    if dxl_comm_result != COMM_SUCCESS:[m
[32m+[m[32m        print("%s" % packetHandler.getTxRxResult(dxl_comm_result))[m
[32m+[m[32m    elif dxl_error != 0:[m
[32m+[m[32m        print("%s" % packetHandler.getRxPacketError(dxl_error))[m
[32m+[m[41m    [m
[32m+[m[32m    return dxl_present_position[m
[32m+[m
[32m+[m[32m# Set move speed[m
[32m+[m[32mdef set_joint_speed(id,speed):[m
[32m+[m[32m    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, id, ADDR_AX12A_MOVE_SPEED, speed)[m
[32m+[m[32m    if dxl_comm_result != COMM_SUCCESS:[m
[32m+[m[32m        return set_joint_speed(id,speed)[m
[32m+[m[32m    elif dxl_error != 0:[m
[32m+[m[32m        return set_joint_speed(id,speed)[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("Dynamixel#%d speed has been set: %s" % (id,speed))[m
[32m+[m[32m        return 1[m
 [m
 # Control table address[m
[31m-ADDR_MX_TORQUE_ENABLE      = 24               # Control table address is different in Dynamixel model[m
[31m-ADDR_MX_GOAL_POSITION      = 30[m
[31m-ADDR_MX_PRESENT_POSITION   = 36[m
[32m+[m[32mADDR_MX_TORQUE_ENABLE = 24  # Control table address is different in Dynamixel model[m
[32m+[m[32mADDR_MX_GOAL_POSITION = 30                  # <-----[m
[32m+[m[32mADDR_MX_PRESENT_POSITION = 36[m
[32m+[m[32mADDR_AX12A_MOVE_SPEED = 32[m
[32m+[m
[32m+[m[32m# Data Byte Length[m
[32m+[m[32mLEN_MX_GOAL_POSITION = 4[m
[32m+[m[32mLEN_MX_PRESENT_POSITION = 2[m
 [m
 # Protocol version[m
[31m-PROTOCOL_VERSION            = 1.0               # See which protocol version is used in the Dynamixel[m
[32m+[m[32mPROTOCOL_VERSION = 1.0  # See which protocol version is used in the Dynamixel[m
 [m
 # Default setting[m
[31m-DXL_ID_6                    = 6                 # Dynamixel ID : 6[m
[31m-DXL_ID_1                    = 1                 # Dynamixel ID : 1[m
[31m-DXL_ID_2                    = 2                 # Dynamixel ID : 2[m
[31m-DXL_ID_3                    = 3                 # Dynamixel ID : 3[m
[31m-BAUDRATE                    = 1000000             # Dynamixel default baudrate : 57600[m
[31m-DEVICENAME                  = "COM3"    # Check which port is being used on your controller[m
[31m-                                                # ex) Windows: "COM1"   Linux: "/dev/ttyUSB0" Mac: "/dev/tty.usbserial-*"[m
[31m-[m
[31m-TORQUE_ENABLE               = 1                 # Value for enabling the torque[m
[31m-TORQUE_DISABLE              = 0                 # Value for disabling the torque[m
[31m-DXL_MOVING_STATUS_THRESHOLD = 10                # Dynamixel moving status threshold[m
[32m+[m[32mDXL_ID_6 = 6  # Dynamixel ID : 6[m
[32m+[m[32mDXL_ID_1 = 1  # Dynamixel ID : 1[m
[32m+[m[32mDXL_ID_2 = 2  # Dynamixel ID : 2[m
[32m+[m[32mDXL_ID_3 = 3  # Dynamixel ID : 3[m
[32m+[m[32mBAUDRATE = 1000000  # Dynamixel default baudrate : 57600[m
[32m+[m[32mDEVICENAME = "/dev/ttyUSB0"  # Check which port is being used on your controller[m
[32m+[m[32m# ex) Windows: "COM1"   Linux: "/dev/ttyUSB0" Mac: "/dev/tty.usbserial-*"[m
 [m
[32m+[m[32mTORQUE_ENABLE = 1  # Value for enabling the torque[m
[32m+[m[32mTORQUE_DISABLE = 0  # Value for disabling the torque[m
[32m+[m[32mDXL_MOVING_STATUS_THRESHOLD = 10  # Dynamixel moving status threshold[m
[32m+[m[32mdxl_addparam_result = 0[m
 # Initialize PortHandler instance[m
 # Set the port path[m
 # Get methods and members of PortHandlerLinux or PortHandlerWindows[m
[36m@@ -79,6 +110,10 @@[m [mportHandler = PortHandler(DEVICENAME)[m
 # Get methods and members of Protocol1PacketHandler or Protocol2PacketHandler[m
 packetHandler = PacketHandler(PROTOCOL_VERSION)[m
 [m
[32m+[m[32m# Initialize Groupsyncwrite instance[m
[32m+[m[32mgroup_num = GroupSyncWrite(portHandler, packetHandler,[m
[32m+[m[32m                           ADDR_MX_GOAL_POSITION, LEN_MX_GOAL_POSITION)[m
[32m+[m
 # Open port[m
 if portHandler.openPort():[m
     print("Succeeded to open the port")[m
[36m@@ -98,10 +133,14 @@[m [melse:[m
     quit()[m
 [m
 # Enable Dynamixel Torque[m
[31m-dxl_comm_result_6, dxl_error_6 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_6, ADDR_MX_TORQUE_ENABLE, TORQUE_ENABLE)[m
[31m-dxl_comm_result_1, dxl_error_1 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_1, ADDR_MX_TORQUE_ENABLE, TORQUE_ENABLE)[m
[31m-dxl_comm_result_2, dxl_error_2 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_2, ADDR_MX_TORQUE_ENABLE, TORQUE_ENABLE)[m
[31m-dxl_comm_result_3, dxl_error_3 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_3, ADDR_MX_TORQUE_ENABLE, TORQUE_ENABLE)[m
[32m+[m[32mdxl_comm_result_6, dxl_error_6 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_6, ADDR_MX_TORQUE_ENABLE,[m
[32m+[m[32m                                                              TORQUE_ENABLE)[m
[32m+[m[32mdxl_comm_result_1, dxl_error_1 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_1, ADDR_MX_TORQUE_ENABLE,[m
[32m+[m[32m                                                              TORQUE_ENABLE)[m
[32m+[m[32mdxl_comm_result_2, dxl_error_2 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_2, ADDR_MX_TORQUE_ENABLE,[m
[32m+[m[32m                                                              TORQUE_ENABLE)[m
[32m+[m[32mdxl_comm_result_3, dxl_error_3 = packetHandler.write1ByteTxRx(portHandler, DXL_ID_3, ADDR_MX_TORQUE_ENABLE,[m
[32m+[m[32m                                                              TORQUE_ENABLE)[m
 if (dxl_comm_result_6 or dxl_comm_result_1 or dxl_comm_result_2 or dxl_comm_result_3) != COMM_SUCCESS:[m
     print("%s" % packetHandler.getTxRxResult(dxl_comm_result_6))[m
     print("%s" % packetHandler.getTxRxResult(dxl_comm_result_1))[m
[36m@@ -116,35 +155,140 @@[m [melse:[m
     print("Dynamixel has been successfully connected")[m
 [m
 while 1:[m
[31m-    # print("Press any key to continue! (or press ESC to quit!)")[m
[31m-    # if getch() == chr(0x1b):[m
[31m-    #     break[m
[32m+[m[32m    print("Press any key to continue! (or press ESC to quit!)")[m
[32m+[m[32m    if getch() == chr(0x1b):[m
[32m+[m[32m        break[m
 [m
[31m-    GoalPosition_6 = input("Enter Goal Position for Motor 6 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[31m-    GoalPosition_6_deg = float(GoalPosition_6)[m
[31m-    GoalPosition_6 = int(GoalPosition_6_deg/300*1023)[m
[32m+[m[32m    dxl6_present_position = read_pos(DXL_ID_6)[m
[32m+[m[32m    dxl1_present_position = read_pos(DXL_ID_1)[m
[32m+[m[32m    dxl2_present_position = read_pos(DXL_ID_2)[m
[32m+[m[32m    dxl3_present_position = read_pos(DXL_ID_3)[m
 [m
[31m-    GoalPosition_1 = input("Enter Goal Position for Motor 1 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[31m-    GoalPosition_1_deg = float(GoalPosition_1)[m
[31m-    GoalPosition_1 = int(GoalPosition_1_deg/300*1023)[m
[32m+[m[32m    joint_speed = 1[m
[32m+[m[32m    set_joint_speed(DXL_ID_6,joint_speed)[m
[32m+[m[32m    set_joint_speed(DXL_ID_1,joint_speed)[m
[32m+[m[32m    set_joint_speed(DXL_ID_2,joint_speed)[m
[32m+[m[32m    set_joint_speed(DXL_ID_3,joint_speed)[m
 [m
[31m-    GoalPosition_2 = input("Enter Goal Position for Motor 2 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[31m-    GoalPosition_2_deg = float(GoalPosition_2)[m
[31m-    GoalPosition_2 = int(GoalPosition_2_deg/300*1023)[m
[32m+[m[32m    # GoalPosition_6 = input([m
[32m+[m[32m    #     "Enter Goal Position for Motor 6 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[32m+[m[32m    # GoalPosition_6_deg = float(GoalPosition_6)[m
[32m+[m[32m    # GoalPosition_6 = int(GoalPosition_6_deg / 300 * 1023)[m
 [m
[31m-    GoalPosition_3 = input("Enter Goal Position for Motor 3 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[31m-    GoalPosition_3_deg = float(GoalPosition_3)[m
[31m-    GoalPosition_3 = int(GoalPosition_3_deg/300*1023)[m
[32m+[m[32m    # GoalPosition_1 = input([m
[32m+[m[32m    #     "Enter Goal Position for Motor 1 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[32m+[m[32m    # GoalPosition_1_deg = float(GoalPosition_1)[m
[32m+[m[32m    # GoalPosition_1 = int(GoalPosition_1_deg / 300 * 1023)[m
[32m+[m
[32m+[m[32m    # GoalPosition_2 = input([m
[32m+[m[32m    #     "Enter Goal Position for Motor 2 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[32m+[m[32m    # GoalPosition_2_deg = float(GoalPosition_2)[m
[32m+[m[32m    # GoalPosition_2 = int(GoalPosition_2_deg / 300 * 1023)[m
[32m+[m
[32m+[m[32m    # GoalPosition_3 = input([m
[32m+[m[32m    #     "Enter Goal Position for Motor 3 in degrees (Range is 0 to 300 degrees; 150 degrees is neutral position): ")[m
[32m+[m[32m    # GoalPosition_3_deg = float(GoalPosition_3)[m
[32m+[m[32m    # GoalPosition_3 = int(GoalPosition_3_deg / 300 * 1023)[m
[32m+[m
[32m+[m[32m    '''[m
[32m+[m[32m    Write goal position[m
[32m+[m[32m    dxl_comm_result, dxl_error = packetHandler.write4ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION, dxl_goal_position[index])[m
[32m+[m[32m    -------------------------------------------------------------------------------------------------------------------------------[m
[32m+[m[32m    dxl_comm_result_6, dxl_error_6 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_6, ADDR_MX_GOAL_POSITION,[m
[32m+[m[32m                                                                  GoalPosition_6)[m
[32m+[m[32m    dxl_comm_result_1, dxl_error_1 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_1, ADDR_MX_GOAL_POSITION,[m
[32m+[m[32m                                                                  GoalPosition_1)[m
[32m+[m[32m    dxl_comm_result_2, dxl_error_2 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_2, ADDR_MX_GOAL_POSITION,[m
[32m+[m[32m                                                                  GoalPosition_2)[m
[32m+[m[32m    dxl_comm_result_3, dxl_error_3 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_3, ADDR_MX_GOAL_POSITION,[m
[32m+[m[32m                                                                  GoalPosition_3)[m
[32m+[m[32m    '''[m
[32m+[m[32m    # Input goal position[m
[32m+[m[32m    GoalPosition_6 = int(input("Motor 6 Goal pos?"))[m
[32m+[m[32m    GoalPosition_1 = int(input("Motor 1 Goal pos?"))[m
[32m+[m[32m    GoalPosition_2 = int(input("Motor 2 Goal pos?"))[m
[32m+[m[32m    GoalPosition_3 = int(input("Motor 3 Goal pos?"))[m
[32m+[m
[32m+[m[32m    # Allocate goal position value into byte array[m
[32m+[m[32m    param_goal_position_6 = [DXL_LOBYTE(DXL_LOWORD(GoalPosition_6)), DXL_HIBYTE(DXL_LOWORD([m
[32m+[m[32m        GoalPosition_6)), DXL_LOBYTE(DXL_HIWORD(GoalPosition_6)), DXL_HIBYTE(DXL_HIWORD(GoalPosition_6))][m
[32m+[m[32m    param_goal_position_1 = [DXL_LOBYTE(DXL_LOWORD(GoalPosition_1)), DXL_HIBYTE(DXL_LOWORD([m
[32m+[m[32m        GoalPosition_1)), DXL_LOBYTE(DXL_HIWORD(GoalPosition_1)), DXL_HIBYTE(DXL_HIWORD(GoalPosition_1))][m
[32m+[m[32m    param_goal_position_2 = [DXL_LOBYTE(DXL_LOWORD(GoalPosition_2)), DXL_HIBYTE(DXL_LOWORD([m
[32m+[m[32m        GoalPosition_2)), DXL_LOBYTE(DXL_HIWORD(GoalPosition_2)), DXL_HIBYTE(DXL_HIWORD(GoalPosition_2))][m
[32m+[m[32m    param_goal_position_3 = [DXL_LOBYTE(DXL_LOWORD(GoalPosition_3)), DXL_HIBYTE(DXL_LOWORD([m
[32m+[m[32m        GoalPosition_3)), DXL_LOBYTE(DXL_HIWORD(GoalPosition_3)), DXL_HIBYTE(DXL_HIWORD(GoalPosition_3))][m
[32m+[m
[32m+[m[32m    # Add Dynamixel#n goal position value to the Syncwrite storage[m
[32m+[m[32m    dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m        group_num.addParam(DXL_ID_1, param_goal_position_1)).value[m
[32m+[m[32m    print(dxl_addparam_result)[m
[32m+[m[32m    if dxl_addparam_result != 1:[m
[32m+[m[32m        print(dxl_addparam_result)[m
[32m+[m[32m        print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_1))[m
[32m+[m[32m        quit()[m
[32m+[m[41m        [m
[32m+[m[32m    dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m        group_num.addParam(DXL_ID_6, param_goal_position_6)).value[m
[32m+[m[32m    print(dxl_addparam_result)[m
[32m+[m[32m    if dxl_addparam_result != 1:[m
[32m+[m[32m        print(dxl_addparam_result)[m
[32m+[m[32m        print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_6))[m
[32m+[m[32m        quit()[m
[32m+[m[32m    dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m        group_num.addParam(DXL_ID_2, param_goal_position_2)).value[m
[32m+[m[32m    print(dxl_addparam_result)[m
[32m+[m[32m    if dxl_addparam_result != 1:[m
[32m+[m[32m        print(dxl_addparam_result)[m
[32m+[m[32m        print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_2))[m
[32m+[m[32m        quit()[m
[32m+[m[32m    dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m        group_num.addParam(DXL_ID_3, param_goal_position_3)).value[m
[32m+[m[32m    print(dxl_addparam_result)[m
[32m+[m[32m    if dxl_addparam_result != 1:[m
[32m+[m[32m        print(dxl_addparam_result)[m
[32m+[m[32m        print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_3))[m
[32m+[m[32m        quit()[m
[32m+[m[32m    # dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m    #     group_num.addParam(DXL_ID_1, [GoalPosition_1])).value[m
[32m+[m[32m    # print(dxl_addparam_result)[m
[32m+[m[32m    # if dxl_addparam_result != 1:[m
[32m+[m[32m    #     print(dxl_addparam_result)[m
[32m+[m[32m    #     print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_1))[m
[32m+[m[32m    #     quit()[m
[32m+[m[41m        [m
[32m+[m[32m    # dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m    #     group_num.addParam(DXL_ID_6, [GoalPosition_6])).value[m
[32m+[m[32m    # print(dxl_addparam_result)[m
[32m+[m[32m    # if dxl_addparam_result != 1:[m
[32m+[m[32m    #     print(dxl_addparam_result)[m
[32m+[m[32m    #     print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_6))[m
[32m+[m[32m    #     quit()[m
[32m+[m[32m    # dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m    #     group_num.addParam(DXL_ID_2, [GoalPosition_2])).value[m
[32m+[m[32m    # print(dxl_addparam_result)[m
[32m+[m[32m    # if dxl_addparam_result != 1:[m
[32m+[m[32m    #     print(dxl_addparam_result)[m
[32m+[m[32m    #     print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_2))[m
[32m+[m[32m    #     quit()[m
[32m+[m[32m    # dxl_addparam_result = ctypes.c_ubyte([m
[32m+[m[32m    #     group_num.addParam(DXL_ID_3, [GoalPosition_3])).value[m
[32m+[m[32m    # print(dxl_addparam_result)[m
[32m+[m[32m    # if dxl_addparam_result != 1:[m
[32m+[m[32m    #     print(dxl_addparam_result)[m
[32m+[m[32m    #     print("[ID:%03d] groupSyncWrite addparam failed" % (DXL_ID_3))[m
[32m+[m[32m    #     quit()[m
[32m+[m[32m    print("----------------")[m
[32m+[m[32m    print(group_num.data_dict)[m
[32m+[m
[32m+[m[32m    # Syncwrite goal position[m
[32m+[m[32m    dxl_comm_result = group_num.txPacket()[m
[32m+[m[32m    if dxl_comm_result != COMM_SUCCESS:[m
[32m+[m[32m        print("%s" % packetHandler.getTxRxResult(dxl_comm_result))[m
[32m+[m
[32m+[m[32m    # Clear syncwrite parameter storage[m
[32m+[m[32m    group_num.clearParam()[m
 [m
[31m-    ''' Array section'''[m
[31m-    [m
[31m-    [m
[31m-    # Write goal position[m
[31m-    # dxl_comm_result, dxl_error = packetHandler.write4ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION, dxl_goal_position[index])[m
[31m-    dxl_comm_result_6, dxl_error_6 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_6, ADDR_MX_GOAL_POSITION, GoalPosition_6)[m
[31m-    dxl_comm_result_1, dxl_error_1 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_1, ADDR_MX_GOAL_POSITION, GoalPosition_1)[m
[31m-    dxl_comm_result_2, dxl_error_2 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_2, ADDR_MX_GOAL_POSITION, GoalPosition_2)[m
[31m-    dxl_comm_result_3, dxl_error_3 = packetHandler.write4ByteTxRx(portHandler, DXL_ID_3, ADDR_MX_GOAL_POSITION, GoalPosition_3)[m
     # if dxl_comm_result != COMM_SUCCESS:[m
     #     print("%s" % packetHandler.getTxRxResult(dxl_comm_result))[m
     # elif dxl_error != 0:[m
[36m@@ -152,31 +296,39 @@[m [mwhile 1:[m
 [m
     while 1:[m
         # Read present position[m
[31m-        dxl_present_position_6, dxl_comm_result_6, dxl_error_6 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_6, ADDR_MX_PRESENT_POSITION)[m
[31m-        dxl_present_position_1, dxl_comm_result_1, dxl_error_1 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_1, ADDR_MX_PRESENT_POSITION)[m
[31m-        dxl_present_position_2, dxl_comm_result_2, dxl_error_2 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_2, ADDR_MX_PRESENT_POSITION)[m
[31m-        dxl_present_position_3, dxl_comm_result_3, dxl_error_3 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_3, ADDR_MX_PRESENT_POSITION)[m
[32m+[m[32m        dxl_present_position_6, dxl_comm_result_6, dxl_error_6 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_6,[m
[32m+[m[32m                                                                                             ADDR_MX_PRESENT_POSITION)[m
[32m+[m[32m        dxl_present_position_1, dxl_comm_result_1, dxl_error_1 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_1,[m
[32m+[m[32m                                                                                             ADDR_MX_PRESENT_POSITION)[m
[32m+[m[32m        dxl_present_position_2, dxl_comm_result_2, dxl_error_2 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_2,[m
[32m+[m[32m                                                                                             ADDR_MX_PRESENT_POSITION)[m
[32m+[m[32m        dxl_present_position_3, dxl_comm_result_3, dxl_error_3 = packetHandler.read4ByteTxRx(portHandler, DXL_ID_3,[m
[32m+[m[32m                                                                                             ADDR_MX_PRESENT_POSITION)[m
         # if dxl_comm_result != COMM_SUCCESS:[m
         #     print("%s" % packetHandler.getTxRxResult(dxl_comm_result))[m
         # elif dxl_error != 0:[m
         #     print("%s" % packetHandler.getRxPacketError(dxl_error))[m
 [m
[31m-        dxl_present_position_6_deg = dxl_present_position_6/1023*300[m
[31m-        dxl_present_position_1_deg = dxl_present_position_1/1023*300[m
[31m-        dxl_present_position_2_deg = dxl_present_position_2/1023*300[m
[31m-        dxl_present_position_3_deg = dxl_present_position_3/1023*300[m
[32m+[m[32m        dxl_present_position_6_deg = dxl_present_position_6 / 1023 * 300[m
[32m+[m[32m        dxl_present_position_1_deg = dxl_present_position_1 / 1023 * 300[m
[32m+[m[32m        dxl_present_position_2_deg = dxl_present_position_2 / 1023 * 300[m
[32m+[m[32m        dxl_present_position_3_deg = dxl_present_position_3 / 1023 * 300[m
 [m
[31m-        print("[ID:%03d] GoalPos:%03d  PresPos:%03d  [ID:%03d] GoalPos:%03d  PresPos:%03d  [ID:%03d] GoalPos:%03d  PresPos:%03d  [ID:%03d] GoalPos:%03d  PresPos:%03d"[m
[31m-              % (DXL_ID_6, GoalPosition_6_deg, dxl_present_position_6_deg, DXL_ID_1, GoalPosition_1_deg, dxl_present_position_1_deg,[m
[31m-                 DXL_ID_2, GoalPosition_2_deg, dxl_present_position_2_deg, DXL_ID_3, GoalPosition_3_deg, dxl_present_position_3_deg))[m
[32m+[m[32m        print([m
[32m+[m[32m            "[ID:%03d] GoalPos:%03d  PresPos:%03d  [ID:%03d] GoalPos:%03d  PresPos:%03d  [ID:%03d] GoalPos:%03d  PresPos:%03d  [ID:%03d] GoalPos:%03d  PresPos:%03d"[m
[32m+[m[32m            % (DXL_ID_6, GoalPosition_6_deg, dxl_present_position_6_deg, DXL_ID_1, GoalPosition_1_deg,[m
[32m+[m[32m               dxl_present_position_1_deg,[m
[32m+[m[32m               DXL_ID_2, GoalPosition_2_deg, dxl_present_position_2_deg, DXL_ID_3, GoalPosition_3_deg,[m
[32m+[m[32m               dxl_present_position_3_deg))[m
 [m
         if not (abs(GoalPosition_6 - dxl_present_position_6) or abs(GoalPosition_1 - dxl_present_position_1) or[m
[31m-                abs(GoalPosition_2 - dxl_present_position_2) or abs(GoalPosition_3 - dxl_present_position_3)) > DXL_MOVING_STATUS_THRESHOLD:[m
[32m+[m[32m                abs(GoalPosition_2 - dxl_present_position_2) or abs([m
[32m+[m[32m                    GoalPosition_3 - dxl_present_position_3)) > DXL_MOVING_STATUS_THRESHOLD:[m
             break[m
 [m
[31m-[m
 # Disable Dynamixel Torque[m
[31m-dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_MX_TORQUE_ENABLE, TORQUE_DISABLE)[m
[32m+[m[32mdxl_comm_result, dxl_error = packetHandler.write1ByteTxRx([m
[32m+[m[32m    portHandler, DXL_ID, ADDR_MX_TORQUE_ENABLE, TORQUE_DISABLE)[m
 if dxl_comm_result != COMM_SUCCESS:[m
     print("%s" % packetHandler.getTxRxResult(dxl_comm_result))[m
 elif dxl_error != 0:[m
[1mdiff --git a/README.md b/README.md[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mdiff --git a/ik.py b/ik.py[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mdiff --git a/image_process.py b/image_process.py[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mdiff --git a/result.jpg b/result.jpg[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mdiff --git a/test.png b/test.png[m
[1mold mode 100644[m
[1mnew mode 100755[m
